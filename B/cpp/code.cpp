#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

/*
Условие задачи.

На стол в ряд выложены карточки, на каждой карточке написано натуральное число. 
За один ход разрешается взять карточку либо с левого, либо с правого конца ряда. 
Всего можно сделать k ходов. 
Итоговый счет равен сумме чисел на выбранных карточках. 
Определите, какой максимальный счет можно получить по итогам игры.

Первое предложенное решение (Вердикт: TL и ML).
Создадим матрицу M размера (k+1)*(k+1), где будем заполнять только те клетки (i, j),
в которых i + j <= k.
Клетка (i, j) матрицы M означает, какую сумму чисел мы получим, если возьмем 
i карточек слева и j карточек справа.
Начальная инициализация:
    matrix[0][0] = 0;
    for (int i = 1; i <= k; ++i) {
        matrix[0][i] = cards[i - 1] + matrix[0][i - 1];
        matrix[i][0] = cards[n - i] + matrix[i - 1][0];
    }
Реккурентная формула:
    for (int i = 1; i <= k; ++i) {
        for (int j = 1; j < matrix[i].size(); ++j) {
            matrix[i][j] = matrix[i][0] + matrix[0][j]; 
        }
    }
Сложность решения: так как по условию k <= n, то в худшем случае
потребуется O(n^2) памяти и O(n^2) времени.

Второе предложенное решение (Вердикт: TL).
Оптимизируем первое предложенное решение по памяти.
В реккурентной формуле идет подсчет сумм некоторого элемента из 
(i, 0) и (0, j). Это значит, что достаточно хранить в памяти
нулевой столбец и нулевую строку, а максимум обновлять каждый раз
при вычислении очередной суммы элементов.

Третье предложенное решение (Вердикт: OK).
Оптимизируем второе предложенное решение по времени.
Засчет того, что все числа в исходном массиве -- натуральные,
можно сказать, что максимум будет в любом случае на побочной диагонали,
а это значит, что второе предложенное решение просто так считало те случаи,
когда берется карт меньше чем k штук.
Итого, можно считать только суммы, которые получаются на побочной диагонали
и из них выбирать максимум.

Сложность:
    1. Память. Использовали доп. O(2(k + 1)) = O(k) = O(n) памяти.
    2. Время. Использовали O(2(k + 1)) = O(k) = O(n) времени.
Итоговая сложность -- линейная как по времени, так и по памяти.
*/

int32_t getCardCount(int n, int k, const vector<int32_t> &cards) {
    std::vector<int32_t> topRow(k + 1);
    std::vector<int32_t> leftCol(k + 1);
    topRow[0] = 0;
    leftCol[0] = 0;
    for (int i = 1; i <= k; ++i) {
        topRow[i] = cards[i - 1] + topRow[i - 1];
        leftCol[i] = cards[n - i] + leftCol[i - 1];
    }

    int32_t maxSum = -1;
    for (int i = 0; i <= k; ++i) {
        maxSum = std::max(maxSum, leftCol[i] + topRow[k - i]);
    }
    return maxSum;
}

int readInt() {
    int x;
    cin >> x;
    return x;
}

vector<int32_t> readList(int n) {
    vector<int32_t> res(n);
    for (int i = 0; i < n; i++) {
        cin >> res[i];
    }
    return res;
}

int main() {
    int n = readInt();
    int k = readInt();
    vector<int32_t> cards = readList(n);
    cout << getCardCount(n, k, cards);
}
